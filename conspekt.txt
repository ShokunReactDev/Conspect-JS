Типы данных:
-Number
-String
-Boolean
-null
-Object
-Simbol
-Undefind


Number
Metod - toFixed добавляет знаки после целого числа "."
- toExponential для перевода в ехпоненсиальную форму
- toPrecision выводит количество чисел - точное 
АРИФМЕТИЧЕСКИЕ ОПЕРАТОРЫ
Унарные -10 и +10
Ибимента и дикримента ++ -- меняют переменную на 1
есть префиксный и постфиксный ++i или i++
Бинарные операторы + = * /
Остаток от деления %
n+=2 вместо n=n+2
Операторы отношения > < = возвращают boolean


Math.sqrt - квадратный корень
Math.row - возведение в степень
есть числа пи и е


STRING

Перенос строки в файле\ в консоле\n для табуляции \n\t
Кавычки что бы читались - \"

Metods
- string.charAt(0) возвращает символ
- Длинна строки - .length
- string.substring(10,21) возвращает от и до какого символа
- Похожие .slice .substr
- string.indexOf("i") возвращает индес буквы
- string.replace заменить строку("is","is not")
- string.split(" ") разбирает строку на массив - в данном случае через пробел
- string.toUpperCase приведение к верхнему регистру
- string.toLowerCase приведение к нижнему регистру

BOOLEAN

При сравнениях
true && false => false
true && false => true
true || false => true
!true => falce
!falce => true


NULL UNDEFIND
Отсутствие значения 
null - пустое значение
undefind - полное отсутствие какого либо значения, несуществующий элемент или свойство


ПРЕОБРАЗОВАНИЕ ТИПОВ
Конструктор 	console.log(Number("555")) => console.log(+"555")
		console.log(String(555))   => console.log(555 + "")
		console.log(Boolean(555))  => console.log(!!555)
Еще один метод Number => String : 	const number = 22;
					number.toString()
Аналогично false.toString()

String => Number : 	console.log(parseInt("45", 10//10-это система исчисления))
			console.log(parseFloat("12.45 em"))


УСЛОВНЫЕ ИНСТРУКЦИИ

- if(выражение) инструкция - если выражение истинное инструкция выполняется
Если выражение не истинное else (можно еще добавлять if)

Пример:
if(x>10){
	text = "x больше 10";
} else if (x<10){
	text = "х меньше 10";
}else{
	text = "х равен 10";
}

- switch(выражение){
	case выражение: инструкции
	default выражение: инструкции
} - switch(выражение) будет сравнивать выражение с case, когда совпадет будет выполнена инструкция, а так же все остальные инструкции которые стоят ниже
Если выражение не равно ни одному case, будет выполняться инструкция default

Пример:
let name = "Sorax", homecity;

switch(name) {
	case "John": homecity = "Boston"; break
	case "Sorax": homecity = "Belgorod"; break
	case "Bill": homecity = "LA"; 
	default: homecity = "Moscow";
}
console.log(homecity);

break - инструкция мгновенного выхода из цикла switch


УСЛОВНЫЙ ОПЕРАТОР

выражение1(условие) ? выражение2 : выражение3
выражение1 - преобразуется в boolean и если true => возвращает выражание2, если false => возвращает выражение3

Пример:
let x = 15;
let text = x > 10 ? "х больше 10" : "х меньше либо равен 10";
console.log(text);
или
let x = 15;
let text = x > 10 ? "х больше 10" : х <10 ? "х меньше 10" : "х равен 10";
console.log(text);

, - бинарный оператор
выражение, выражение - вычисляет значение левого и правого апперанта и возвращает значение правого апперанта


ЦИКЛЫ

for (выражение;выражение;выражение) инструкция
for (инициализация ; условия/тест ; инкримент/декремент) тело цикло 
иттерация - количество прохождения цикла

Пример:
let i;
for(i=0; i<10; i++){        //с начало проверяется потом выполняется
	console.log(i);
}
но лучше делать цикл к 0
for(i=10; i>0; i--){
	console.log(i);
} 


while (выражение) инструкция

Пример:
let i = 0;
while (i<10) {
	console.log(i);
	i++;
}
но лучше делать цикл к 0
let i = 10;
while (i--) {
	console.log(i);
}


do инструкция while(выражение)
Пример:

do console.log(i++); while (i<10)


ФУНКЦИИ

function идентификатор /это имя нашей функции/ (аргументы/переменные которые передаем в функцию/) {инструкции}

Пример:
function greet(name) {
	return "Hello" + name;
}

Вызов функции: выражение(аргумент)
console.log(greet("Sorax")/еще можно добавить метод .toUpperCase()/);
Если функция ничего не возвращает - Undefind

Так же функцию можно определить если присвоить переменной выражение определение функции
Пример аноннимной функции:
const greet = function (name) {
	return "Hello" + name;
}; /важно после такой функции ;/

При этом console.log(greet("Sorax") => console.log(greet("Sorax", 22, 33, 44) - не будет выводиться в console, но при:
const greet = function (name) {
	console.log(arguments); - в console ["Sorax", 22, 33, 44] массив, в котором можно обратиться по индексу [i] или метод .length
 	return "Hello" + name;
};

Т.к. функции это объекты, мы можем передавать функции в функции в качестве аргументов, а так же возвращать функции из функций для передачи callback
Пример:
let func = function(callback){
	let name = "Sorax";
	callback(name);
};

func(function(n){
	console.log("Hello" + n);
}); 

И возвращающим значением
Пример:
let func = function(){
	return function(){
	console.log("Hi");
	}
};

Вызвать func()();

Аноннимная самовызывающая функция
Пример:
let greeting = (function(name){
	return "Hello" + name;
}("Sorax"));
console.log(greeting);


ЦЕПОЧКИ ОБЛАСТЕЙ ВИДИМОСТИ

Область видимости переменной - это часть программы где эта переменная определена и доступна, делится на:
- Глобальные - переменные объявленные вне каких либо функций
- Локальные - переменные объявленные внутри функции
Вложенные функции создают цепочки областей видимости

Hosting переменных


ЗАМЫКАНИЯ

Благодаря наличию внутренней функции, интерпретатор продолжает хранить значения переменных внешней функции, даже после её завершения.
Лексическая область видимости - каждую функцию можно назвать замыкания
Пример:
let counter = (function(){
	let count = 0;
	return function(){
	return count++;
}
}());
console.log(counter()); => 0
console.log(counter()); => 1
console.log(counter()); => 2
Не принимает никаких аргументов выдает при этом разные значения при разных вызовах
Позволяют сделать функцию для сохраниния и инкапсуляции данных
Так же можно обнулить счетчик или добавить число с которого начнется расчет
Пример:
let counter = (function(){
	let count = 0;
	return function(num){
	count = num !== undefined ? num : count;
	return count++;
}
}());
console.log(counter()); => 0
console.log(counter()); => 1
console.log(counter()); => 2
console.log(counter(20)); => 20
console.log(counter()); => 21
console.log(counter()); => 22

Такое же поведение при другой реализации
Пример:
let counter = function(num){
	counter.count = num !== undefined ? num : counter.count;
};
counter.count = 0;


ОБРАБОТКА ИСКЛЮЧЕНИЙ
Инструкция throw - создает исключения
throw выражение
Пример:
throw "Hello" //
Это исключения при которых браузер будет выдавать ошибку
Пример:
let calculate = function(n){
	if(n>10) throw new Error("n should be less than 10")
return n + 10;
};
calculate(20);  
Важно использовать исключения только в крайних случаях, когда на правильности данных держиться весь смысл нашего кода

Инструкция try/catch/finally - обрабатывает исключения
Пример:
try{				/*блок catch или finally могут отсутствовать, но не оба сразу
	инструкции /*которые могут бросить исключения
} catch (идентификатор) {  /*ловим это исключение
	инструкции  /*которые будут выполняться только в том случае если в try произошло исключение
} finally {
	инструкции  /* будут выполняться независимо произошли какие то исключения или нет, будут выполняться
}

Пример:
try{
	calculate(20);
} catch(e) {
	console.log("Can't execute calculate:" + e.message);
}



ОБЪЕКТЫ

1 МЕТОД СОЗДАНИЯ ОБЪЕКТОВ
Набор свойств парами имя: значение, имя: значение, имя: значение
Пример:
{
	name: "Sorax",
	age: 20,
	gender: "male"
} описали объект и это человек
Можем присвоить объекту переменную и обращаться через него
const person = {
	name: "Sorax",
	age: 20,
	gender: "male"
}

Выражение доступа
Пример:
/выражение.идентификатор/
console.log(person.name);
/выражение[выражение]/

Так же с помощью выражения доступа можно менять значение динамически:
person.age = 25;
или добавлять свойство объекту
person.userID = 2223;

Значением любого свойства мб функция => свойство становиться методом
const person = {
	name: "Sorax",
	age: 20,
	gender: "male",
	sayHi: function() {
	return "Hello";
	}
}


2 МЕТОД СОЗДАНИЯ ОБЪЕКТОВ С ПОМОЩЬЮ NEW

const object = new Object();
object.property = "value";

3 МЕТОД СОЗДАНИЯ ОБЪЕКТОВ

const object = Object.create(null);
console.log(object); прототип первого объекта

const object = Object.create({x: 10, y: 20});
object.x = 20;
console.log(object);

УДАЛЕНИЕ СВОЙСТВ ОБЪЕКТА
/delete выражение/
Пример:
delete object.x
console.log(object);
Можно удалить только родные, не наследуемые свойства объекта
Наследуемые свойства можно удалить на прямую у своего прототипа

ДЛЯ ПРОВЕРКИ СВОЙСТВА ОБЪЕКТА ЕСТЬ БИНАРНЫЙ ОПЕРАТОР IN(вне зависимости наследуемое это свойство или родное)
console.log("x" in object); => true
console.log("o" in object); => false
или
console.log(object.x); => 10
console.log(object.o); => undefined
или проверка на установленный undefined в ручную 
object.z = undefined;
console.log(object.z); => undefined
console.log("z" in object); => true


this И НЕПРЯМОЙ ВЫЗОВ МЕТОДОВ

Пример:
const greet = function(){
}

